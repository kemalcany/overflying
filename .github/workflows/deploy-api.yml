name: Deploy API

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/api/**'
      - 'k8s/api/**'
      - '.github/workflows/deploy-api.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/api/**'
      - 'k8s/api/**'
      - '.github/workflows/deploy-api.yml'

env:
  PROJECT_ID: overflying-cluster
  REGION: europe-west1
  GKE_CLUSTER: overflying-autopilot
  REGISTRY: europe-west1-docker.pkg.dev
  REPOSITORY: overflying-images
  IMAGE_NAME: api

jobs:
  test-api:
    name: Test API
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'apps/api/pyproject.toml'

      - name: Install dependencies
        env:
          DATABASE_URL: postgresql+psycopg2://test:test@localhost:5433/test_db
        run: |
          cd apps/api
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Wait for PostgreSQL
        run: |
          timeout 30 bash -c 'until pg_isready -h localhost -p 5433 -U test; do sleep 1; done'

      - name: Run tests
        env:
          DATABASE_URL: postgresql+psycopg2://test:test@localhost:5433/test_db
          TEST_DATABASE_URL: postgresql+psycopg2://test:test@localhost:5433/test_db
        run: |
          cd apps/api
          pytest -v --cov=src --cov-report=term-missing --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: always()
        with:
          file: ./apps/api/coverage.xml
          flags: api
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Test Success
        if: success()
        run: |
          echo "========================================="
          echo "   API TESTS PASSED SUCCESSFULLY!"
          echo "========================================="
          echo ""
          echo "All tests completed without errors."
          echo "Coverage report generated successfully."
          echo ""
          echo "Build status: PASSING"
          echo "========================================="

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test-api
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Extract metadata for Docker
        id: meta
        run: |
          echo "tags=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "latest=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

      - name: Build Docker image
        id: build
        run: |
          cd apps/api
          docker build -t ${{ steps.meta.outputs.tags }} -t ${{ steps.meta.outputs.latest }} .

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ steps.meta.outputs.tags }}
          docker push ${{ steps.meta.outputs.latest }}

      - name: Build Success
        run: |
          echo "========================================="
          echo "   DOCKER IMAGE BUILT & PUSHED!"
          echo "========================================="
          echo ""
          echo "Image: ${{ steps.meta.outputs.tags }}"
          echo "Latest: ${{ steps.meta.outputs.latest }}"
          echo ""
          echo "========================================="

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: staging
      url: https://staging.api.overfly.ing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }}

      - name: Update image tag in deployment
        run: |
          kubectl set image deployment/api-staging \
            api=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --namespace=staging

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/api-staging --namespace=staging --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods --namespace=staging -l app=api,environment=staging
          kubectl get service api-service --namespace=staging

      - name: Staging Deployment Success
        run: |
          echo "========================================="
          echo "   STAGING DEPLOYMENT SUCCESSFUL!"
          echo "========================================="
          echo ""
          echo "Deployment: api-staging"
          echo "Namespace: staging"
          echo "Image: ${{ github.sha }}"
          echo ""
          EXTERNAL_IP=$(kubectl get service api-service --namespace=staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "External IP: $EXTERNAL_IP"
          echo ""
          echo "========================================="

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: production
      url: https://api.overfly.ing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }}

      - name: Update image tag in deployment
        run: |
          kubectl set image deployment/api-production \
            api=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --namespace=production

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/api-production --namespace=production --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods --namespace=production -l app=api,environment=production
          kubectl get service api-service --namespace=production

      - name: Production Deployment Success
        run: |
          echo "========================================="
          echo "   PRODUCTION DEPLOYMENT SUCCESSFUL!"
          echo "========================================="
          echo ""
          echo "Deployment: api-production"
          echo "Namespace: production"
          echo "Image: ${{ github.sha }}"
          echo ""
          EXTERNAL_IP=$(kubectl get service api-service --namespace=production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "External IP: $EXTERNAL_IP"
          echo ""
          echo "========================================="
