name: Deploy Web

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/web/**'
      - '.github/workflows/deploy-web.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/web/**'
      - '.github/workflows/deploy-web.yml'

env:
  PROJECT_ID: overflying-web
  REGION: europe-west1

jobs:
  test-web:
    name: Test Web
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: apps/web
        run: npm ci

      - name: Run unit tests
        working-directory: apps/web
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: always()
        with:
          files: ./apps/web/coverage/coverage-final.json
          flags: web
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Test Success
        if: success()
        run: |
          echo "========================================="
          echo "   WEB TESTS PASSED SUCCESSFULLY!"
          echo "========================================="

  build-staging:
    name: Build for Staging
    runs-on: ubuntu-latest
    needs: test-web
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get staging API URL from Secret Manager
        id: staging-secrets
        run: |
          API_URL=$(gcloud secrets versions access latest --secret="api-url-staging" --project=${{ env.PROJECT_ID }})
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: apps/web
        run: npm ci

      - name: Build static export for staging
        working-directory: apps/web
        env:
          NEXT_PUBLIC_API_URL: ${{ steps.staging-secrets.outputs.api_url }}
        run: npm run build

      - name: Upload staging build artifact
        uses: actions/upload-artifact@v4
        with:
          name: staging-build
          path: apps/web/out
          retention-days: 1

  build-production:
    name: Build for Production
    runs-on: ubuntu-latest
    needs: test-web
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get production API URL from Secret Manager
        id: production-secrets
        run: |
          API_URL=$(gcloud secrets versions access latest --secret="api-url-production" --project=${{ env.PROJECT_ID }})
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: apps/web
        run: npm ci

      - name: Build static export for production
        working-directory: apps/web
        env:
          NEXT_PUBLIC_API_URL: ${{ steps.production-secrets.outputs.api_url }}
        run: npm run build

      - name: Upload production build artifact
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: apps/web/out
          retention-days: 1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-staging
    environment:
      name: web-staging

    steps:
      - name: Download staging build artifact
        uses: actions/download-artifact@v4
        with:
          name: staging-build
          path: out

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get staging bucket from Secret Manager
        id: staging-secrets
        run: |
          BUCKET=$(gcloud secrets versions access latest --secret="bucket-web-staging" --project=${{ env.PROJECT_ID }})
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT

      - name: Upload to staging bucket
        run: |
          gsutil -m rsync -r -d out gs://${{ steps.staging-secrets.outputs.bucket }}

      - name: Set cache control headers
        run: |
          gsutil -m setmeta -h "Cache-Control:public, max-age=31536000, immutable" \
            "gs://${{ steps.staging-secrets.outputs.bucket }}/_next/static/**" || true
          gsutil -m setmeta -h "Cache-Control:public, max-age=0, must-revalidate" \
            "gs://${{ steps.staging-secrets.outputs.bucket }}/**/*.html" || true

      - name: Staging Deployment Success
        run: |
          echo "========================================="
          echo "   STAGING DEPLOYED!"
          echo "========================================="
          echo "Bucket: gs://${{ steps.staging-secrets.outputs.bucket }}"
          echo "Temp URL: https://storage.googleapis.com/${{ steps.staging-secrets.outputs.bucket }}/index.html"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-production, deploy-staging]
    environment:
      name: web-production

    steps:
      - name: Download production build artifact
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: out

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get production bucket from Secret Manager
        id: production-secrets
        run: |
          BUCKET=$(gcloud secrets versions access latest --secret="bucket-web-production" --project=${{ env.PROJECT_ID }})
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT

      - name: Upload to production bucket
        run: |
          gsutil -m rsync -r -d out gs://${{ steps.production-secrets.outputs.bucket }}

      - name: Set cache control headers
        run: |
          gsutil -m setmeta -h "Cache-Control:public, max-age=31536000, immutable" \
            "gs://${{ steps.production-secrets.outputs.bucket }}/_next/static/**" || true
          gsutil -m setmeta -h "Cache-Control:public, max-age=0, must-revalidate" \
            "gs://${{ steps.production-secrets.outputs.bucket }}/**/*.html" || true

      - name: Production Deployment Success
        run: |
          echo "========================================="
          echo "   PRODUCTION DEPLOYED!"
          echo "========================================="
          echo "Bucket: gs://${{ steps.production-secrets.outputs.bucket }}"
          echo "Temp URL: https://storage.googleapis.com/${{ steps.production-secrets.outputs.bucket }}/index.html"