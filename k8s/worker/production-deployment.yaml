---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-production
  namespace: production
  labels:
    app: worker
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: worker
      environment: production
  template:
    metadata:
      labels:
        app: worker
        environment: production
        app.kubernetes.io/name: overflying-worker
        app.kubernetes.io/component: worker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: production-app-sa
      containers:
      - name: worker
        image: europe-west1-docker.pkg.dev/overflying-cluster/overflying-images/worker:latest  # Updated by CI/CD
        ports:
        - containerPort: 8000
          name: metrics
        env:
        - name: DATABASE_URL
          value: "postgresql+psycopg2://production_user:taekwando123@localhost:5432/production"
        - name: NATS_URL
          value: "nats://nats.infrastructure.svc.cluster.local:4222"
        - name: GPU_SIMULATION
          value: "false"
        - name: POLL_INTERVAL
          value: "5"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        # Worker doesn't have health endpoints, so we check process
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import sys; sys.exit(0)"
          initialDelaySeconds: 30
          periodSeconds: 30
      - name: cloud-sql-proxy
        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.15.0
        args:
          - "--structured-logs"
          - "--port=5432"
          - "overflying-db:europe-west1:overflying-db"
        securityContext:
          runAsNonRoot: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: worker-service
  namespace: production
  labels:
    app: worker
    environment: production
spec:
  selector:
    app: worker
    environment: production
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
      name: metrics
  type: ClusterIP
